/*
 * GradleWorks for ForgeGradle 5
 * Written by Jonathing
 * Version 4.0.0-beta.2
 *
 * What was once just an effort to make life easier is now a fully-fledged buildscript that does almost all of the work
 * for you! The only things you will need to take care of yourself are dependencies, but that shouldn't be too big of a
 * deal. Anything you'll most likely ever need to change can be found in gradle.properties. Enjoy!
 */

import net.minecraftforge.gradle.common.util.ModConfig

// Detects if the OS is macOS.
static boolean isMacOS() {
    def osProp = System.properties['os.name'].toLowerCase()
    return osProp.contains('darwin') || osProp.contains('osx') || osProp.contains('mac')
}

// Detects if the OS is Windows.
static boolean isWindows() {
    def osProp = System.properties['os.name'].toLowerCase()
    return osProp.contains('windows')
}

// Detects if GradleWorks should use Mixin.
boolean isUsingMixin() {
    return project.hasProperty('mixin_version')
}

// Whether or not to use FML only (REMINDER: YOU ARE GIVEN NO SUPPORT FOR THIS).
boolean usingFMLOnly() {
    return project.hasProperty('use_fmlonly') && Boolean.parseBoolean(use_fmlonly)
}

// Buildscript setup (DO NOT EDIT!!!)
buildscript {
    repositories {
        // Minecraft Forge Maven
        maven { url 'https://maven.minecraftforge.net' }

        // SpongePowered Maven
        maven { url 'https://repo.spongepowered.org/maven' }

        // ParchmentMC Maven
        maven { url 'https://maven.parchmentmc.org' }

        // Maven Central
        mavenCentral()
    }
    dependencies {
        // Minecraft Forge ForgeGradle
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true

        // SpongePowered MixinGradle
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'

        // ParchmentMC Librarian
        classpath group: 'org.parchmentmc', name: 'librarian', version: '1.+', changing: true
    }
}

println('GradleWorks for ForgeGradle 5')
println('Written by Jonathing')
println('Version 4.0.0-beta.2')

// ForgeGradle - The heart and soul of the buildscript and the development environment.
apply plugin: 'net.minecraftforge.gradle'
// MixinGradle - Adds Mixin support to the development environment.
if (isUsingMixin()) {
    if (!project.extensions.findByName('eclipse')) {
        println()
    }
    apply plugin: 'org.spongepowered.mixin'
}
// Librarian - Adds Parchment support to the development environment.
apply plugin: 'org.parchmentmc.librarian.forgegradle'

// Eclipse - Adds compatibility for Eclipse workspaces.
apply plugin: 'eclipse'
// Signing - Adds the ability to sign jars.
apply plugin: 'signing'
// Maven Publishing - Used to be able to publish to maven repositories.
apply plugin: 'maven-publish'

// Gets a file from a parent directory and folder/file names
File getFile(File parent, String... paths) {
    StringBuilder builder = new StringBuilder()
    builder.append(parent)
    for (String path : paths) {
        builder.append('/')
        builder.append(path)
    }

    return file(builder.toString().replace('/', isWindows() ? '\\' : '/'))
}

// Get the mod version from gradle.properties
version = mod_version
// Get the mod group from gradle.properties
group = mod_group
// Get the archives base name from the mod id and the Minecraft version.
archivesBaseName = String.format('%s-%s', mod_id, mc_version)

// this variable points to where the latest built file is placed for usage in publish.gradle
project.ext.reobfFile = getFile(buildDir, 'libs', "${archivesBaseName}-${version}.jar".toString())

// This file contains additional instructions for signing builds of this mod (see the file for more details).
apply from: 'signing.gradle'
// This file contains additional instructions for publishing builds of this mod to maven repositories (commented out by default, see the file for more details).
apply from: 'publish.gradle'

// Ensure that the IDE knows that this project is for Java 16 (or at the least, SDK level 16) and nothing else.
java.toolchain.languageVersion = JavaLanguageVersion.of(16)

// This section prints out the Java, Minecraft, and Mod info just to double check all the values are correct.
// It is printed on every build, so make sure you double check!
println()
println('Java Information')
printf('- Java: %s%n', System.getProperty('java.version'))
printf('- JVM: %s (%s)%n', System.getProperty('java.vm.version'), System.getProperty('java.vendor'))
printf('- Arch: %s%n', System.getProperty('os.arch'))
println()
println('Minecraft Information')
printf('- Minecraft: %s%n', mc_version)
printf('- Minecraft Forge: %s%n', forge_version)
printf('- Mappings: %s %s%n', mappings_version, mappings_channel)
println()
println('Mod Information')
printf('- ID: %s%n', mod_id)
printf('- Name: %s%n', mod_name)
printf('- Version: %s%n', version)
println()

// Any repositories for dependencies go here. Feel free to add to them as needed.
repositories {
    // CurseMaven
    maven {
        url 'https://www.cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
}

// Minecraft setup
minecraft {
    // Mappings to use for the project. See default MDK for mappings instructions.
    mappings channel: mappings_channel, version: mappings_version

    // Access Transformer
    File atFile = getFile(projectDir, 'src', 'main', 'resources', 'META-INF', 'accesstransformer.cfg')
    if (atFile.exists()) {
        accessTransformer = atFile
    }

    // Run configurations
    runs {
        // All run configurations
        all {
            lazyToken('minecraft_classpath') {
                configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
            }
        }

        // Client run configuration
        client {
            // The directory for Minecraft to run in
            workingDirectory getFile(projectDir, 'run')

            // Enable mixins if installed
            if (isUsingMixin()) {
                arg "-mixin.config=${mod_id}.mixins.json".toString()
            }

            // Remaps refmaps to workspace mappings for mixin
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', getFile(buildDir, 'createSrgToMcp', 'output.srg')

            // Logging markers for Forge. See default MDK for instructions
            property 'forge.logging.markers', 'REGISTRIES'

            // Console logging level (debug by info, change to debug if you need debug logging)
            property 'forge.logging.console.level', 'info'

            // Tells the mod if it is running in an IDE (must be configured in your project, but not required)
            property "${mod_id}.iside".toString(), 'true'

            // Add the mod's main source set to the total mods in the run configuration
            ModConfig modConfig = new ModConfig(project, mod_id)
            modConfig.source(sourceSets.main)
            mods.add(modConfig)
        }

        // Server run configuration
        server {
            // The directory for Minecraft to run in
            workingDirectory getFile(projectDir, 'run')

            // Enable mixins if installed
            if (isUsingMixin()) {
                arg "-mixin.config=${mod_id}.mixins.json".toString()
            }

            // Additional arguments exclusive to the server (nogui by default, separated by ",")
            args 'nogui'

            // Remaps refmaps to workspace mappings for mixin
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', getFile(buildDir, 'createSrgToMcp', 'output.srg')

            // Logging markers for Forge. See default MDK for instructions
            property 'forge.logging.markers', 'REGISTRIES'

            // Console logging level (debug by info, change to debug if you need debug logging)
            property 'forge.logging.console.level', 'info'

            // Tells the mod if it is running in an IDE (must be configured in your project, but not required)
            property "${mod_id}.iside".toString(), 'true'

            // Add the mod's main source set to the total mods in the run configuration
            ModConfig modConfig = new ModConfig(project, mod_id)
            modConfig.source(sourceSets.main)
            mods.add(modConfig)
        }

        // Data run configuration
        data {
            // The directory for Minecraft to run in
            workingDirectory getFile(projectDir, 'run')

            // Enable mixins if installed
            if (isUsingMixin()) {
                arg "-mixin.config=${mod_id}.mixins.json".toString()
            }

            // Additional arguments exclusive to data generation (do NOT change these unless necessary)
            args '--mod', mod_id, '--all', '--output', getFile(projectDir, 'src', 'generated', 'resources'), '--existing', getFile(projectDir, 'src', 'main', 'resources')

            // Remaps refmaps to workspace mappings for mixin
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', getFile(buildDir, 'createSrgToMcp', 'output.srg')

            // Logging markers for Forge. See default MDK for instructions
            property 'forge.logging.markers', 'REGISTRIES'

            // Console logging level (debug by info, change to debug if you need debug logging)
            property 'forge.logging.console.level', 'info'

            // Tells the mod if it is running in an IDE (must be configured in your project, but not required)
            property "${mod_id}.iside".toString(), 'true'

            // Tells the mod if it is running datagen (must be configured in your project, but not required)
            property "${mod_id}.datagen".toString(), 'true'

            // Workaround for https://github.com/MinecraftForge/ForgeGradle/issues/690
            // Written by Shadew
            if (isMacOS()) {
                jvmArg('-XstartOnFirstThread')
            }

            // Add the mod's main source set to the total mods in the run configuration
            ModConfig modConfig = new ModConfig(project, mod_id)
            modConfig.source(sourceSets.main)
            mods.add(modConfig)
        }
    }
}

sourceSets.main.resources {
    // Include resources generated by data generators.
    srcDir getFile(projectDir, 'src', 'generated', 'resources')
}

// Ensure the reference map is included in the source sets
if (isUsingMixin()) {
    mixin {
        add sourceSets.main, "${mod_id}.refmap.json".toString()
    }
}

configurations {
    library // Library dependencies that aren't mods
    implementation.extendsFrom(library)
}

// Dependencies to use in this project
dependencies {
    // Minecraft Forge
    String toolchain = 'forge'
    if (usingFMLOnly()) {
        toolchain = 'fmlonly'
    }
    minecraft "net.minecraftforge:${toolchain}:${mc_version}-${forge_version}".toString()

    // Mixin processor
    if (isUsingMixin()) {
        annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor".toString()
    }

    // Lazy DataFixerUpper(LazyDFU) [FORGE]
    // TODO Use custom 1.17 build of LazyDFU in the future
    if (project.hasProperty('lazydfu_file_id')) {
//        runtimeOnly fg.deobf("curse.maven:lazy-dfu-forge-460819:${lazydfu_file_id}".toString())
    }
}

// Attributes to include in the built jar file
jar {
    manifest {
        if (isUsingMixin()) {
            attributes([
                    'Specification-Title'     : mod_id,
                    'Specification-Vendor'    : mod_author,
                    'Specification-Version'   : '1',
                    'Implementation-Title'    : project.name,
                    'Implementation-Version'  : archiveVersion.getOrElse(version),
                    'Implementation-Vendor'   : mod_author,
                    'Implementation-Timestamp': new Date().format('yyyy-MM-dd\'T\'HH:mm:ssZ'),
                    'MixinConfigs'            : "${mod_id}.mixins.json".toString()
            ])
        } else {
            attributes([
                    'Specification-Title'     : mod_id,
                    'Specification-Vendor'    : mod_author,
                    'Specification-Version'   : '1',
                    'Implementation-Title'    : project.name,
                    'Implementation-Version'  : archiveVersion.getOrElse(version),
                    'Implementation-Vendor'   : mod_author,
                    'Implementation-Timestamp': new Date().format('yyyy-MM-dd\'T\'HH:mm:ssZ')
            ])
        }
    }
}
