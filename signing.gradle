/*
 * GradleWorks for ForgeGradle 4
 * Written by Jonathing
 * Version 4.0.0-alpha.4
 *
 * This gradle file contains additional instructions for signing builds of this mod.
 */

// Get a variable from gradle.properties, or return null if it doesn't exist.
String getVariable(String key) {
    return rootProject.hasProperty(key) ? rootProject.property(key) : null
}

// Ensures that the signJar task will run on every build
// REMINDER: the jar will not be signed if the mcKeyStore key in gradle.properties does not exist
build {
    dependsOn 'signJar'
}

// detects if the mcKeyStore key in gradle.properties exists so the jar can be signed
def canJarBeSigned() {
    return getVariable('mcKeyStore') != null
}

// Returns the public fingerprint, may be empty ("")
def getProjectFingerprint() {
    if (canJarBeSigned()) {
        def sha256 = getVariable('mcKeyStoreSHA256')
        return sha256 != null ? sha256 : ''
    }
}

// Signs a jar file
def sign(File jar) {
    if (canJarBeSigned()) {
        println("Attempting to sign jar: ${jar}".toString())
        ant.signjar(
                destDir: "${jar.parentFile}",
                jar: "${jar}",
                alias: getVariable('mcKeyStoreAlias'),
                storetype: "jks",
                keystore: getVariable("mcKeyStore"),
                storepass: getVariable('mcKeyStorePass'),
                keypass: getVariable('mcKeyStoreKeyPass'),
                verbose: true,
                preservelastmodified: "true"
        )
        printf('Jar signed: %s%n', jar)
    } else {
        println('No keystore property found, jar will not be signed')
    }
}

// Gradle task to sign the jar.
task signJar(dependsOn: 'reobfJar') {
    doLast {
        sign(jar.getArchiveFile().get().asFile)
    }
}
